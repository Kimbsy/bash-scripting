#!/bin/bash
#
# Tool for extracting decks from TappedOut deck pages.

#******************************************************************************#
# Find all distinct decklists in the article.
# 
# Decklists are of the form:
#   
#******************************************************************************#
get_decks() {
    echo $1 | grep -Po "<div class=\"container-fluid\">\K.*?(?=<h3>Description</h3>)"
}

#******************************************************************************#
# Replace encoded apostrophes with ASCII ones.
#******************************************************************************#
decode_apostrophes() {
    text=$1
    echo "${text//&#39;/\'}"
}

#******************************************************************************#
# Remove apostrophes to stop forge deleting the deck.
#******************************************************************************#
remove_apostrophes() {
    text=$1
    echo "${text//\'/}"
}

#******************************************************************************#
# Find and print all cards.
# 
# Card elements are of the form:
#   <li class="member" ... >
#     <a ... class="qty board" ... >3x</a>
#     <span ... >
#       <a ... class="card-link card-hover" ... >Cryptic Command</a>
#     </span>
#   </li>
#******************************************************************************#
find_cards() {
    echo $1 | grep -Po "<li class=\"member\".*?</li>" | while IFS= read -r line ; do
        # Clean up apostrophes.
        line=$(decode_apostrophes "$line")

        # Print the quantity and name of the card
        qty=$(echo $line | grep -Po "<a.*?class=\"qty board\".*?>\K\d+(?=x</a>)")
        card_name=$(echo $line | grep -Po "<a.*?class=\"card-link card-hover\".*?>\K.*?(?=</a>)")
        echo "$qty $card_name"
    done
}

#******************************************************************************#
# Determine the name of a deck.
#******************************************************************************#
get_deck_name() {
    name=$(echo $1 | grep -Po "<h2> \K.*?(?= </h2>)")
    decode_apostrophes=$(decode_apostrophes "$name")
    remove_apostrophes=$(remove_apostrophes "$decode_apostrophes")
    echo "$remove_apostrophes"
}

#******************************************************************************#
# Parse a deck and print in forge ready format.
#******************************************************************************#
process_deck() {
    deck_name=$(get_deck_name "$1")
    echo "[metadata]"
    echo "Name=$deck_name"
    echo "Deck Type=constructed"

    # Find the main and sideboard sections.
    main=$(echo $1 | grep -Po ".*<h3 style=\"\">Sideboard")
    side=$(echo $1 | grep -Po "<h3 style=\"\">Sideboard.*")

    # Find cards in each section.
    echo "[Main]"
    find_cards "$main"
    echo "[Sideboard]"
    find_cards "$side"
}

# Get the article html.
url=$1
html=$(curl "$url" -s | tr '\n' ' ')

# Find the decks.
decks=$(get_decks "$html")
if [[ -z $decks ]]; then
    echo "No decks found"
    notify-send "No decks found"
    exit 1
fi

# Process each deck and output to file.
processed_decks=()
while read -r deck; do
    deck_name=$(get_deck_name "$deck")
    echo "Processing deck: $deck_name"
    process_deck "$deck" > ~/.forge/decks/constructed/"$deck_name".dck
    processed_decks+=("$deck_name")
done <<< "$decks"

# Notify user of new decks.
printf -v notification_text '%s\n' "${processed_decks[@]}"
notify-send "Processed decks:" "$notification_text"
