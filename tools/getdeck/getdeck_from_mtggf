#!/bin/bash
#
# Tool for extracting decks from MTGGoldfish articles.

#******************************************************************************#
# Find all distinct decklists in the article.
#******************************************************************************#
get_decks() {
    echo $1 | grep -Po "widget-deck-placeholder.*?</ins>"
}

#******************************************************************************#
# Remove apostrophes to stop forge deleting the deck.
#******************************************************************************#
remove_apostrophes() {
    text=$1
    echo "${text//\'/}"
}

#******************************************************************************#
# Find and print all cards.
# 
# Card elements are of the form:
#   <td class="deck-col-qty"> 4 </td>
#   <td class="deck-col-card">
#      <a ... >Monastery Mentor</a>
#   </td>
#******************************************************************************#
find_cards() {
    echo $1 | grep -Po "<td class=\"deck-col-qty\"> \d+ </td> <td class=\"deck-col-card\"> <a.*?>.*?</a>" | while IFS= read -r line ; do
        # Print the quantity and name of the card
        qty=$(echo $line | grep -Po "deck-col-qty\"> \K\d+(?= </td>)")
        card_name=$(echo $line | grep -Po "<td class=\"deck-col-card\"> <a.*?>\K.*?(?=</a>)")
        echo "$qty $card_name"
    done
}

#******************************************************************************#
# Determine the name of a deck.
#******************************************************************************#
get_deck_name() {
    name=$(echo $1 | grep -Po "deck-view-title\"> \K.*?(?= <span)")
    remove_apostrophes=$(remove_apostrophes "$name")
    echo $remove_apostrophes
}

#******************************************************************************#
# Parse a deck and print in forge ready format.
#******************************************************************************#
process_deck() {
    deck_name=$(get_deck_name "$1")
    echo "[metadata]"
    echo "Name=$deck_name"
    echo "Deck Type=constructed"

    # Find the main and sideboard sections.
    main=$(echo $1 | grep -Po "tab-online\"> <div class=\"deck-view-decklist\K.*?(?=Sideboard)")
    side=$(echo $1 | grep -Po "tab-online\"> <div class=\"deck-view-decklist.*?Sideboard\K.*?Cards Total")

    # Find cards in each section.
    echo "[Main]"
    find_cards "$main"
    echo "[Sideboard]"
    find_cards "$side"
}

# Get the article html.
url=$1
html=$(phantomjs "/opt/kimbsy/bash/getdeck/getLoadedSource.js" "$url")

# Find the decks.
decks=$(get_decks "$html")
if [[ -z $decks ]]; then
    echo "No decks found"
    notify-send "No decks found"
    exit 1
fi

# Process each deck and output to file.
processed_decks=()
while read -r deck; do
    deck_name=$(get_deck_name "$deck")
    echo "Processing deck: $deck_name"
    process_deck "$deck" > ~/.forge/decks/constructed/"$deck_name".dck
    processed_decks+=("$deck_name")
done <<< "$decks"

# Notify user of new decks.
printf -v notification_text '%s\n' "${processed_decks[@]}"
notify-send "Processed decks:" "$notification_text"
